
//How to pass a Dp or other variable/property value  as a parameter to a converter by adding XPath=property to the converter clause

Height="{Binding Height, ElementName=Innergrid, Converter={StaticResource AddTopOffset}, XPath=TextTopMargin}"
=================================================

//How to call a converter from c#


			//Converter name is SetTextTopOffset 
			SetTextTopOffset conv = new SetTextTopOffset ( );
			Thickness t = ButtonText . Margin; 
			t.Top =Convert.ToInt32(conv . Convert ( t.Top, typeof(int), TextTopMargin, CultureInfo.CurrentCulture ));
			ButtonText . Margin = t;

=================================================

// How to access main dependencies reliably

ScaleX="{Binding TextWidthScale, RelativeSource={RelativeSource FindAncestor,	AncestorType=local:ThreeDeeBtnControl}}"/>

=================================================

// how  to use transform....

								<Rectangle
										Height="44"  Width="120" 
										Canvas.Left="290" 
										Canvas.Top="32" 
										Fill="{StaticResource Red3}">
										<Rectangle.RenderTransform>
											<TransformGroup>
												<ScaleTransform/>
												<SkewTransform x:Name="TestSkew" AngleX="15" AngleY="5"/>
												<RotateTransform x:Name="testRotate" Angle="10"/>
												<TranslateTransform x:Name="TestTranslate" X="12" Y="23"/>
											</TransformGroup>
										</Rectangle.RenderTransform>
										<Rectangle.Style>
											<Style TargetType="Rectangle">
												<Style.Triggers>
													<Trigger Property="IsMouseOver" Value="True">
														<Setter Property="Opacity" Value="0.35"/>
													</Trigger>

												</Style.Triggers>
											</Style>
										</Rectangle.Style>

									</Rectangle>

=================================================

how to modify any control in line in XAML

		<xxxControl.Style>
				<Style TargetType="Rectangle">
					<Style.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value="0.35"/>
						</Trigger>
					</Style.Triggers>
				</Style>
			</Rectangle.Style>

			//You can use this format almost anywhere to change any Dependency Poperty
//			SetValue ( $$owner$$.BtnTextProperty, "here ya go !" );

/Allows control to Override default properties, & lets DP objects be inherited
OverridesDefaultStyle=True

<!--Set up a data context pointing to Bank data for our Listview i the tab control-->
can be used most anywhere in XAML code

<Canvas.DataContext>
	<datamodel:BankAccountViewModel/>
</Canvas.DataContext>
=================================================






	<Grid x:Name="BtnGrid"
			VerticalAlignment="Stretch"
			HorizontalAlignment="Stretch" 
			MouseEnter="Control_MouseEnter"
			MouseLeave="Control_MouseLeave" Margin="0,0,41,77" 
				>
		<!--<Grid.ColumnDefinitions>
			<ColumnDefinition Width="158*"/>
			<ColumnDefinition Width="217*"/>
			<ColumnDefinition Width="126*"/>
			<ColumnDefinition Width="18*"/>
		</Grid.ColumnDefinitions>-->
		<Border x:Name="ActiveBorder"
				CornerRadius="8"
				BorderThickness="{Binding Path=BtnBorderWidth, ElementName=ImageButton}"
				BorderBrush="{Binding Path=BtnBorderColor, ElementName=ImageButton}"
				MouseEnter="Control_MouseEnter"
				MouseLeave="Control_MouseLeave" 
				Margin="0,0,-41,-75"
				MouseLeftButtonDown="RectBtn_MouseLeftButtonDown">
			<!--#region transforms etc-->

			<Border.RenderTransform>
				<TransformGroup>
					<ScaleTransform ScaleX="1" ScaleY="1"/>
					<SkewTransform/>
					<RotateTransform/>
					<TranslateTransform X="0" Y="0"/>
				</TransformGroup>
			</Border.RenderTransform>

			<Border.Effect>

				<!--// This uses ALL options-->

				<DropShadowEffect 						
							Color="{Binding Path=ShadowBlurColor, ElementName=ImageButton}"
							Opacity="{Binding Path=ShadowOpacity, ElementName=ImageButton}"
							ShadowDepth="{Binding Path=ShadowBlurSize, ElementName=ImageButton}"
							BlurRadius="{Binding Path=ShadowBlurRadius, ElementName=ImageButton}"
							RenderingBias="Quality"						
							Direction="49"/>
			</Border.Effect>

			<!--#endregion-->

		</Border>
		<!--<Viewbox x:Name="vbox"
				   Panel.ZIndex="2"
				Stretch="Fill" Margin="0,0,0,0">-->

		<Grid x:Name="Innergrid"
				Width="560"
			MouseEnter="Control_MouseEnter"
			MouseLeave="Control_MouseLeave" Margin="0,3,-41,-77" HorizontalAlignment="Left" 
			
			>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Width, ElementName=Innergrid}"/>
				<ColumnDefinition/>
			</Grid.ColumnDefinitions>
			<StackPanel
				Orientation="Horizontal"
				Height="{Binding Height, ElementName=Innergrid}"
				Width="{Binding Width, ElementName=Innergrid}"
				>
				<!--Height="{Binding ImageHeight, ElementName=ImageButton}"-->
				<Image x:Name="ImgName" 
					Opacity="1"
					MouseEnter="Control_MouseEnter"
					MouseLeave="Control_MouseLeave" 
					Visibility="Visible"
					LayoutUpdated="ImgName_LayoutUpdated"
					Source ="pack://application:,,,/icons/cloud.png" 
				 Margin="0,0,0,0" 
									/>
				<!--Width="{Binding Path=Width, ElementName=Innergrid, Converter={StaticResource resetTextWidth}, XPath=ImageWidth}"-->
				<TextBlock x:Name="ButtonText"
				     Panel.ZIndex="5"
				     Background="Beige"
				     HorizontalAlignment="Center"
					MouseEnter="Control_MouseEnter"
					MouseLeave="Control_MouseLeave" 
				     TextAlignment="Center"
					Text="{Binding Path=ImgBtnText, ElementName=ImageButton}"
					TextWrapping="Wrap"
					Loaded="Textblock_change"
					Foreground="{Binding Path=BtnForeground, ElementName=ImageButton}"					
					FontSize="{Binding Path=BtnTextSize, ElementName=ImageButton}" 
					Margin="0,5,2,5" 
					SizeChanged="TextWidthChanged" 
					LayoutUpdated="layoutchanged" 
				     Width="365" 
				     RenderTransformOrigin="0.747,0.519" 
					      />

			</StackPanel>
		</Grid>
	</Grid>
